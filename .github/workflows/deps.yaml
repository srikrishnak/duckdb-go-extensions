name: Build static library dependencies
on:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  headers:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - shell: bash
        run: make deps.header
      - uses: actions/upload-artifact@v4
        with:
          name: includes
          path: include/*
          retention-days: 1

  darwin_amd64:
    runs-on: macos-13
    strategy:
      matrix:
        build_type:
          - { name: 'core', BUILD_CORE: 'TRUE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'substrait', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'TRUE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'boost_iostreams', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'TRUE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'avrocpp', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'TRUE' }
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - shell: bash
        env:
          BUILD_CORE: ${{ matrix.build_type.BUILD_CORE }}
          BUILD_SUBSTRAIT: ${{ matrix.build_type.BUILD_SUBSTRAIT }}
          BUILD_BOOST_IOSTREAMS: ${{ matrix.build_type.BUILD_BOOST_IOSTREAMS }}
          BUILD_AVRO_CPP: ${{ matrix.build_type.BUILD_AVRO_CPP }}
        run: |
          if [[ "${BUILD_AVRO_CPP}" == "TRUE" ]]; then
            brew update
            brew install boost cmake
          fi
          make deps.darwin.amd64
      - uses: actions/upload-artifact@v4
        with:
          name: darwin_amd64_${{ matrix.build_type.name }}
          path: deps/darwin_amd64/*
          retention-days: 1

  darwin_arm64:
    runs-on: macos-13-xlarge
    strategy:
      matrix:
        build_type:
          - { name: 'core', BUILD_CORE: 'TRUE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'substrait', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'TRUE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'boost_iostreams', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'TRUE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'avrocpp', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'TRUE' }
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - shell: bash
        env:
          BUILD_CORE: ${{ matrix.build_type.BUILD_CORE }}
          BUILD_SUBSTRAIT: ${{ matrix.build_type.BUILD_SUBSTRAIT }}
          BUILD_BOOST_IOSTREAMS: ${{ matrix.build_type.BUILD_BOOST_IOSTREAMS }}
          BUILD_AVRO_CPP: ${{ matrix.build_type.BUILD_AVRO_CPP }}
        run: |
          if [[ "${BUILD_AVRO_CPP}" == "TRUE" ]]; then
            brew update
            brew install boost cmake
          fi
          make deps.darwin.arm64
      - uses: actions/upload-artifact@v4
        with:
          name: darwin_arm64_${{ matrix.build_type.name }}
          path: deps/darwin_arm64/*
          retention-days: 1

  linux_amd64:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build_type:
          - { name: 'core', BUILD_CORE: 'TRUE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'substrait', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'TRUE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'boost_iostreams', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'TRUE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'avrocpp', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'TRUE' }
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - shell: bash
        env:
          BUILD_CORE: ${{ matrix.build_type.BUILD_CORE }}
          BUILD_SUBSTRAIT: ${{ matrix.build_type.BUILD_SUBSTRAIT }}
          BUILD_BOOST_IOSTREAMS: ${{ matrix.build_type.BUILD_BOOST_IOSTREAMS }}
          BUILD_AVRO_CPP: ${{ matrix.build_type.BUILD_AVRO_CPP }}
        run: |
          if [[ "${BUILD_AVRO_CPP}" == "TRUE" ]]; then
            sudo apt-get update
            sudo apt-get install -y libboost-all-dev libboost-iostreams-dev libboost-system-dev cmake
          fi
          make deps.linux.amd64
      - uses: actions/upload-artifact@v4
        with:
          name: linux_amd64_${{ matrix.build_type.name }}
          path: deps/linux_amd64/*
          retention-days: 1

  linux_arm64:
    runs-on: arm64-builders
    strategy:
      matrix:
        build_type:
          - { name: 'core', BUILD_CORE: 'TRUE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'substrait', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'TRUE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'boost_iostreams', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'TRUE', BUILD_AVRO_CPP: 'FALSE' }
          - { name: 'avrocpp', BUILD_CORE: 'FALSE', BUILD_SUBSTRAIT: 'FALSE', BUILD_BOOST_IOSTREAMS: 'FALSE', BUILD_AVRO_CPP: 'TRUE' }
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - name: Install cross compile toolchain
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - shell: bash
        env:
          BUILD_CORE: ${{ matrix.build_type.BUILD_CORE }}
          BUILD_SUBSTRAIT: ${{ matrix.build_type.BUILD_SUBSTRAIT }}
          BUILD_BOOST_IOSTREAMS: ${{ matrix.build_type.BUILD_BOOST_IOSTREAMS }}
          BUILD_AVRO_CPP: ${{ matrix.build_type.BUILD_AVRO_CPP }}
        run: |
          if [[ "${BUILD_AVRO_CPP}" == "TRUE" ]]; then
            sudo apt-get update
            sudo apt-get install -y libboost-all-dev libboost-iostreams-dev libboost-system-dev cmake
          fi
          make deps.linux.arm64
      - uses: actions/upload-artifact@v4
        with:
          name: linux_arm64_${{ matrix.build_type.name }}
          path: deps/linux_arm64/*
          retention-days: 1

  commit:
    runs-on: ubuntu-latest
    needs: [headers, darwin_amd64, darwin_arm64, linux_amd64, linux_arm64, iceberg]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
      - shell: bash
        run: |
          rm -f deps/darwin_amd64/*
          rm -f deps/darwin_arm64/*
          rm -f deps/linux_amd64/*
          rm -f deps/linux_arm64/*
          rm -f deps/freebsd_amd64/*
          rm -f deps/windows_amd64/*
          rm -rf include/*
      - uses: actions/download-artifact@v4
        with:
          name: includes
          path: include
      - uses: actions/download-artifact@v4
        with:
          name: darwin_amd64_core
          path: deps/darwin_amd64
      - uses: actions/download-artifact@v4
        with:
          name: darwin_amd64_substrait
          path: deps/darwin_amd64
      - uses: actions/download-artifact@v4
        with:
          name: iceberg-v1.1.3-extension-osx_amd64
          path: deps/darwin_amd64
      - uses: actions/download-artifact@v4
        with:
          name: darwin_arm64_core
          path: deps/darwin_arm64
      - uses: actions/download-artifact@v4
        with:
          name: darwin_arm64_substrait
          path: deps/darwin_arm64
      - uses: actions/download-artifact@v4
        with:
          name: iceberg-v1.1.3-extension-osx_arm64
          path: deps/darwin_arm64
      - uses: actions/download-artifact@v4
        with:
          name: linux_amd64_core
          path: deps/linux_amd64
      - uses: actions/download-artifact@v4
        with:
          name: linux_amd64_substrait
          path: deps/linux_amd64
      - uses: actions/download-artifact@v4
        with:
          name: iceberg-v1.1.3-extension-linux_amd64
          path: deps/linux_amd64
      - uses: actions/download-artifact@v4
        with:
          name: linux_arm64_core
          path: deps/linux_arm64
      - uses: actions/download-artifact@v4
        with:
          name: linux_arm64_substrait
          path: deps/linux_arm64
      - uses: actions/download-artifact@v4
        with:
          name: iceberg-v1.1.3-extension-linux_arm64
          path: deps/linux_arm64
      - name: Push static libraries
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Re-build static libraries

  iceberg:
    name: Build extension binaries
    uses: ./.github/workflows/iceberg_extension_distribution.yaml
    with:
      extension_name: iceberg
      duckdb_version: v1.1.3
      ci_tools_version: v1.1.3
      exclude_archs: 'linux_amd64_gcc4'

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-13, macos-13-xlarge, ubuntu-20.04, arm64-builders ]

    steps:
      - name: Dump System Architecture
        run: |
          echo "Operating System: ${{ matrix.os }}"
          echo "Architecture: $(uname -m)"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Go version from go.mod
        id: extract-go-version
        run: |
          GO_VERSION=$(grep -m1 '^go ' go.mod | awk '{print $2}')
          if [ -z "$GO_VERSION" ]; then
            echo "No Go version specified in go.mod"
            exit 1
          fi
          echo "go-version=$GO_VERSION" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.go-version }}

      - name: Run tests
        run: go test -run ^TestLoaded